Zoning Buddy PRDExecutive Summary[1][2]Zoning Buddy is an AI-powered web application designed to simplify how people navigate urban zoning regulations and permitting processes. Using advanced Large Language Models (LLMs) and a natural language interface, this product empowers contractors, homeowners, architects, city officials, real estate professionals, and others[3][4] to get instant answers to zoning questions by simply asking in plain English. By extracting and interpreting city zoning code data automatically, the Zoning Buddy removes the need for specialized knowledge or tedious manual research.Primary users benefit through significant time savings and increased confidence in their planning decisions. Zoning Buddy delivers business value by streamlining project planning (reducing costly delays), improving compliance with local laws, and minimizing calls to city zoning departments. In doing so, it helps democratize access to regulatory information, enabling smoother development approval processes and fostering greater transparency between the city and its stakeholders.Table of Contents1. Executive Summary2. Product Vision3. Key Features4. User Stories5. Technical Requirements6. Development Roadmap7. Design Principles and Product Tenets8. AppendixProduct Vision[5]Zoning ordinances are complex, fragmented, and difficult to navigate—especially for people without a background in urban planning. Zoning Buddy[6][7] reimagines the zoning experience by delivering a digital tool that produces trustworthy, context-aware answers in seconds.The goal is to make zoning information universally accessible and immediately actionable. Zoning Buddy interprets city regulations and related materials through structured document ingestion and retrieval-enhanced language models. When a user asks a question, the system autonomously determines the zoning designation for the property, fetches relevant data, checks consistency across multiple model outputs, and returns a clear, well-sourced response or document—all with minimal input required. Rather than asking users to navigate menus or sift through dense documents, Zoning Buddy operates more like a zoning researcher. The long-term vision is to build a zoning platform that cities can trust to serve as the first line of response to resident and developer inquiries—accurately answering common questions so city staff can focus on reviewing and approving permits. By resolving routine zoning and permitting confusion before it ever reaches a planner’s desk, Zoning Buddy will reduce time spent on back-and-forth clarifications, lower error rates in submitted applications, and create a more efficient, self-service pathway for the public.[8][9]User Stories[10][11]? (Stored in Google Sheets)Technical Requirements? Ingestion Pipeline: Use OCR and LLMs to extract and normalize zoning documents into a structured dataset. The pipeline must support scanned images, handle diverse formats, tag key sections, and accommodate future amendments without full reprocessing.? Firestore Database: Store zoning data, user profiles, queries, and permit drafts in Firestore using a scalable document-based structure. Enforce strict access control and real-time retrieval for performance and security.? LLM Query Pipeline: Automatically resolve addresses, retrieve zoning context, construct prompts, and generate responses via retrieval-augmented generation. The system autonomously runs follow-up lookups as needed—ensuring completeness without user intervention.? Citation & Confidence Scoring: Every answer includes document references and a certainty score based on source agreement and model alignment. Confidence is derived from model outputs, consistency, and retrieved evidence.? Authentication Layer: Implement optional login via email and Google SSO to support user profiles and saved activity. Use a secure, scalable auth framework like Firebase Authentication to manage sessions and roles.? Front-End Architecture: Deliver a responsive web UI with intuitive query input, real-time display of answers, and profile management for contractors. Design for minimal user input, mobile-first interaction, and fast load times on job sites.? Multi-LLM Consensus: Use multiple language models for cross-validation of responses. Responses are compared, and conflicts trigger fallback handling such as majority voting, clarification prompts, or lowered confidence.? Asynchronous Processing: Handle slow tasks—like document ingestion, complex queries, or long-form permit generation—via background jobs. Use caching for common queries and notify users when results are ready.Development Roadmap[12][13][14]Phase 1 – MVP Launch (Weeks 1–10)The primary goal of Phase 1 is to deliver a fully functional, end-to-end MVP that supports contractors in Minneapolis using zoning data for real-world permitting and planning. This phase lays the technical foundation for ingestion, querying, user interaction, and accuracy validation.Week 1–2: Infrastructure & Ingestion Setup? Set up cloud infrastructure on Google Cloud (Firestore, Cloud Functions, Cloud Storage).? Develop zoning document ingestion pipeline.? Enable OCR for scanned PDFs.? Normalize and tag zoning sections.? Store parsed data in Firestore with a standardized schema.? Validate ingestion accuracy with real Minneapolis zoning code.Week 3–4: Core Query Engine & LLM Integration? Implement address resolution and context gathering.? Build initial natural language prompt generator for zoning queries.? Integrate OpenAI GPT-4 API to process questions with context.? Design and build citation generator based on retrieved Firestore data.? Return structured answers with confidence score and citations.Week 5–6: Multi-LLM Consensus & Validation Logic? Add second LLM (e.g., Claude or PaLM) to run in parallel.? Build logic to compare responses and compute consensus.? Set thresholds for confidence score reporting.? Introduce caching layer for repeat queries.Week 7–8: Front-End Development? Build web UI with mobile-first design.? Create intuitive chat interface for asking zoning questions.? Implement address entry helper and smart prompts.? Connect UI to query engine and display structured answers.? Build spinner/loading states and error handling.Week 9–10: Authentication, Profiles & Project Management? Implement email-based auth and optional Google SSO.? Allow users to create contractor profiles.? Save default company info, contacts, and project addresses.? Enable basic project management dashboard (view query history, tag active projects).Milestone: Functional MVP Ready for Early User Testing? All core features in place: ingestion, querying, multi-LLM validation, user interface, profiles.? Targeted user testing begins with friendly contractors.? Feedback collection and logging for V1 refinement.Phase 2 – Feature Enhancements & User Feedback? Expanded Contextual Data: Integrate additional zoning-related data sources, including property records, overlays, and GIS parcel info, to deepen context awareness.? Enhanced Validation: Deploy multi-LLM consensus validation across more queries, refine confidence scoring heuristics, and surface citations with greater granularity.? User Feedback Loop: Add feedback prompts to answers and permit suggestions; allow users to flag incorrect responses for model improvement.? Advanced User Features: Extend profiles with saved searches, project tagging, and project history. Build export options for answers and checklists (PDF, CSV).? Performance Improvements: Implement query caching and asynchronous workflows for complex permit generation tasks.Phase 3 – Scalability & Integration? Multi-City Support: Modularize ingestion pipeline and database schema to support zoning data from additional municipalities.? Infrastructure Scaling: Prepare backend for higher concurrency and query volume; configure auto-scaling and rate limiting as needed.? City System Integration: Begin integration with municipal permitting portals and GIS platforms to enable real-time data syncing and, eventually, permit submission.? Model Optimization: Explore fine-tuning models on normalized zoning corpora to improve accuracy and reduce inference costs.? Security and Auditing: Introduce more granular permissions, query logging for audit purposes, and improve monitoring across all infrastructure layers.Tenets1. Minimize User EffortThe system should gather as much information as possible without requiring the user to provide it. If data like zoning designation or user profile information is available elsewhere, the tool will retrieve and apply it without asking follow-up questions. The interaction should feel seamless.2. [15]Assume Users are not technicalUpon receiving a user query, the system automatically retrieves all necessary background: zoning classification, applicable rules, location-specific nuances, and related constraints. Users are not expected to know technical terms or provide full project context.3. Prioritize Correctness Over SpeedThe system favors accurate and well-sourced answers over quick responses. Wherever necessary, additional checks—like model consensus or follow-up data retrieval—will be used to improve answer quality, even if that means a slightly longer response time.5. Transparent, Trustworthy InteractionThe tool behaves predictably and explains its logic through citations, structured outputs, and user-friendly summaries. Even when uncertain, the system clearly communicates what’s known and what’s inferred. Each response includes references to specific sections of zoning code or related documents and a confidence score indicating how certain the system is in its answer. Users should never have to guess how trustworthy the information is[16][17].AppendixOpen Questions:? Authentication Preference: We're exploring whether contractors prefer immediate access without account creation or value sign-in features like saving projects and data. The research will guide our default settings and preferred methods such as Google SSO or email.? Onboarding New Data: We need to establish how zoning updates will be ingested and validated over time. Options include periodic re-parsing of documents or integration with city APIs.? Multi-City Expansion: Scaling to other cities will require managing jurisdictional differences in terminology and format. We're evaluating whether to use a shared ontology or maintain city-specific data schemas.? LLM Provider and Cost: Using multiple LLMs increases costs, so we’re assessing tradeoffs between accuracy, speed, and pricing. Future decisions include model selection, caching, and whether to subsidize costs via pricing tiers or city partnerships.? Permit Submission Workflow**:** We're evaluating how far Zoning Buddy should go beyond guidance—whether it should also prepare or submit permits. The answer affects both technical scope and liability.? Privacy and Data Policies: As we collect user data, we need to define retention, anonymization, and compliance protocols. Clear communication of how data is used will be essential for building trust.Graveyard:Key Features[18][19]? Document Parsing and Normalization: Ingests municipal PDFs, scanned maps, and permit guidelines and transforms them into clean, searchable zoning data. Uses OCR for image-based content and LLMs for structure and terminology normalization, creating a standardized knowledge base.? Natural Language Querying with Address Detection: Users ask zoning questions in plain English; the system detects addresses, resolves zoning context, and returns precise rule interpretations. No need for legal references—users get actionable answers with zero technical overhead.? Citations and Confidence Scores: Every response includes a citation linking to the original document and a confidence rating reflecting how sure the system is. This builds user trust and provides transparency—especially important for regulatory interpretation.? User Accounts for Contractors: Profiles store company name, personnel, and commonly used addresses or permit types to speed up repeat use. Logged-in users receive tailored answers and can access past queries and saved projects.? Permit Draft Generation: When appropriate, the system generates a checklist or pre-filled document summarizing what’s needed to move forward. Users know what forms, documents, and steps are required without needing to parse long permit guides.? Multi-LLM Answer Validation: Each query is processed by multiple language models and cross-validated to detect inconsistencies. If models agree, confidence rises; if they differ, the system flags uncertainty or re-runs with clarification.? Optional Authentication: No account is needed to use the core tool. For users who want to save data or access advanced features, we offer streamlined email and Google login.? City System Integration (Future): Built to connect with city GIS and permitting APIs, allowing zoning data to update in real time and—eventually—enable direct permit submissions.Solid introThankswho would the others be?Other professionals that I'm not thinking about? Maybe conservationists or something? We can cut this but my reason for including it was to indicate that I don't believe that this list is inclusive of professionals that could use this.This is good but it does repeat some of the executive summary so it may be good to think about how to combine or differentiate. For this section, I also think a "Near term" or "V1" label and a "Long term" label could help to clarify what is now vs. later at a glanceDecouple Mill City and Zoning Buddy for now i'd say. Zoning Buddy is a product created by Mill City, but Zoning Buddy is the customer-facing brand (actual name tbd)Okay, makes sense. I've done this a few other times in the document so I've made the changes to those instances as well.This is good for us to think about in terms of KPIs and bench-marking against current experienceThat's a good point. Do you have a viewpoint on whether this belongs in the Product Vision section?Thanks for taking a stab at this. I think we need to sit down and workshop this together - right now these are too feature-specific, but each of the stories is also too broad. I think it will make more sense if we work on it together.Thanks for some perspective here. I went ahead and co-opted your spreadsheet and put the revised user stories in the format you recommended. I'm sure we'll dive deeper into this on WednesdayLet's put this in a shared spreadsheet or task trackerI'm generally aligned with the sequencing and grouping (though we need to add UX milestones)Agreed on both counts. I am intentionally not addressing this until after we meet to review the User Stories revision as I think that will have a big impact on prioritizationThis is a little in the weeds technically - I think a way to rephrase this might be doubling down on the "users are not expected to know technical terms". But this actually feels like it could merge with tenet 1.Combine with 5 - ultimately you're saying to make it transparent and trustworthy. Adding the "how" in the tenet can box you in.Yeah, you're right. (Done)this section gives me heartburn because it feels premature. I guess we're kind of in a BRD / PR hybrid... I think we should revisit this section with user stories. (Think - the why vs the how)Makes sense. I just moved it to the graveyard for the time being. I think there are some good ideas in here that may be helpful to discuss later, but agreed that it is a bit premature and perhaps overly prescriptive